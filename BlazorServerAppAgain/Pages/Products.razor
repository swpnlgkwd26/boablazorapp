@page "/products"
@inject IStoreRepository _repository
@inject NavigationManager _navigationManager


<button class="btn btn-primary" @onclick="NavigateToAddProduct"> Add Product </button>
<br />
<SearchProduct  SendProductIdToParent="GetProductById"/>

<table class="table table-bordered">

    <TableHeader IDHeader="Product ID" NameHeader="Product Name"
                 CostHeader="Price"
                 CategoryHeader="Category" />
    <tbody>
        @foreach (var item in products)
        {
            <TableRow ProductID="@item.ProductID"
                      Name="@item.Name"
                      Price="@item.Price"
                      Category="@item.Category" />
        }

    </tbody>
</table>
@if (Product != null)
{
<ul>
    <li> @Product.ProductID , @Product.Name, @Product.Price ,@Product.Category</li>
</ul>
}



@code { // Whenever Component is loaded The Data should be loaded from the Database

    public List<Product> products { get; set; }
    public Product Product { get; set; }

    protected override async Task OnInitializedAsync() // Component is loaded
    {
        products = await _repository.GetProducts();
    }
    public void NavigateToAddProduct()
    {
        _navigationManager.NavigateTo("/addproduct");

    }

    public async Task GetProductById(string value)
    {
        Product = await _repository.GetProductById(Convert.ToInt32(value));
    }






}
